// Protobuf declarations for the spaces management actions of the dblayer

syntax = "proto3";

package fitcheckprotos.dblayer.users;

/*
 * The following message declarations are requests for something to be done on the database
 * The corresponding payload is transferred directly from the deserialized message object into the database
 * Sanitation, authorization, and other access control is deferred to logical services
 */

message CreateNewSpace {
  // The name of the new space to be created. Must be unique to user account space collection
  string space_name = 1;
}

message DeleteSpace {
  // The name of the space to be removed
  string space_name = 1;
  // The name of the space to which items in the space to be deleted should be moved to (if it exists) or the default space
  string move_items_to = 2;
}

message AddItemToSpace {
  // The name of the space item is added to
  string space_name = 1;
  // The unique identifer for the item to be placed into the space named above
  string item_id = 2;
}

message RemoveItemFromSpace {
  // The name of the space item is to be removed from
  string space_name =1;
  // The unique identifier for the item to be removed from the space named above
  string item_id = 2;
}

/*
 * The following message declarations are responses that are generated by the space management servicer
 * The simply package up the database response into a message that can be serialized and sent to logical services to respond appropriately
 * If action was completed the fields of the messaged are populated accordingly
 * If action failed to complete, message field retain their default values and the context of the message should be handled appropriately
 */

message SpaceCreated {
  // Boolean value indicating if the space with the given name was created, false if not created
  bool was_created = 1;
}

message SpacedDeleted {
  // Boolean value indicating if the space with the given name was deletec, false if not created
  bool was_deleted = 1;
}

message ItemAdded {
  // Boolean value indicating if the item was added, false if not added
  bool was_added = 1;
  // Number of items that now exist in the space
  uint32 item_count = 2;
}

message ItemRemoved {
  // Boolean value indicating if the item was removed, false if not removed
  bool was_removed = 1;
  // Number of items that now exist in the space
  uint32 item_count = 2;
}

service SpaceManagement {
  rpc NewSpace(CreateNewSpace) returns (SpaceCreated);
  rpc CloseSpace(DeleteSpace) returns (SpacedDeleted);
  rpc PutItem(AddItemToSpace) returns (ItemAdded);
  rpc TakeItem(RemoveItemFromSpace) returns (ItemRemoved);
}
